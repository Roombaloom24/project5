<html>
<head>
  <title>MoodCoin - Personal Stock</title>
  <link href="style.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <%- include('nav.ejs') %>
  <%- include('logout.ejs') %>
  <div class="rest">
    <h1 style="font-size: 88px; margin-top: 20px" >Mood Stock Market</h1>

    <!-- Container for dynamically generated charts -->
    <div id="chartsContainer"></div>
  </div>

  <script src="script.js"></script>
  <script>
    // Fetch data and dynamically generate charts
    async function fetchAllUsersData() {
  try {
    const response = await fetch('/all-users');
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const groupedData = await response.json();
    console.log("Grouped Data by User:", groupedData);

    // Iterate over each user in the grouped data
    Object.keys(groupedData).forEach((user) => {
      const userData = groupedData[user];

      // Dynamically create a wrapper div for each chart and button
      const wrapper = document.createElement('div');
      wrapper.className = 'chart-wrapper';

      // Create a link that wraps the canvas element
      const link = document.createElement('a');
      link.href = `/specificstock/user=${encodeURIComponent(user)}`; // Link to the specific stock page for the user
      link.title = `View ${user}'s stock details`;

      // Dynamically create a canvas element for each user
      const canvasId = `personalStockChart_${user}`;
      const canvasElement = document.createElement('canvas');
      canvasElement.id = canvasId;
    

      // Append the canvas to the link
      link.appendChild(canvasElement);

      // Create a "Follow" button for the user
      const followButton = document.createElement('button');
      followButton.textContent = `Follow ${user}`;
      followButton.onclick = () => followUser(user); // Attach the followUser function

      // Add a title for the chart
      const userTitle = document.createElement('h3');
      userTitle.textContent = `Chart for ${user}`;

      // Append the title, link (with canvas), and button to the wrapper
      wrapper.appendChild(userTitle);
      wrapper.appendChild(link);
      wrapper.appendChild(followButton);

      // Append the wrapper to the chartsContainer div
      const container = document.getElementById('chartsContainer');
      if (container) {
        container.appendChild(wrapper);
      }

      // Generate a chart for the user
      generateChart(canvasId, userData);
    });
  } catch (error) {
    console.error("Failed to fetch all users' data:", error);
  }
}

    // Example generateChart function using Chart.js
        function generateChart(canvasId, data) {
      const ctx = document.getElementById(canvasId).getContext('2d');
      const labels = data.map(item => item.date);
      const prices = data.map(item => item.price);
    
      new Chart(ctx, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: 'Closing Price (USD)',
            data: prices,
            borderColor: '#d1d1d1', // Line color
            backgroundColor: 'rgba(0, 0, 0, 0)', // Transparent background
            borderWidth: 2, // Line thickness
            tension: 0.3, // Smoothness of the line
            pointRadius: 4, // Size of data points
            pointHoverRadius: 6, // Size of data points on hover
            segment: {
              borderColor: (ctx) => {
                const i = ctx.p0DataIndex;
                const current = ctx.chart.data.datasets[0].data[i];
                const next = ctx.chart.data.datasets[0].data[i + 1];
                if (!next) return 'rgba(75, 192, 192, 1)'; // Default color
                return next > current ? 'green' : 'red'; // Green if price increases, red if it decreases
              },
            },
          }]
        },
        options: {
          responsive: true,
          scales: {
            x: {
              title: { display: true, text: 'Date', color: '#333' }, // X-axis title
              ticks: { color: '#d1d1d1' }, // X-axis tick color
            },
            y: {
              title: { display: true, text: 'Price (USD)', color: '#333' }, // Y-axis title
              ticks: { color: '#d1d1d1' }, // Y-axis tick color
            },
          },
          plugins: {
            legend: { labels: { color: '#d1d1d1' } }, // Legend text color
          },
        },
      });
    }

    // Follow user function
    async function followUser(username) {
      try {
        const response = await fetch('/follow-user', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ username }),
        });

        if (!response.ok) {
          throw new Error(`Failed to follow user: ${response.status}`);
        }

        const result = await response.json();
        console.log(`Successfully followed ${username}:`, result);

        // Optionally, update the UI to indicate the user has been followed
        alert(`You are now following ${username}!`);
      } catch (error) {
        console.error(`Error following user ${username}:`, error);
        alert(`Failed to follow ${username}. Please try again.`);
      }
    }

    // Call the function to fetch data and generate charts
    fetchAllUsersData();
  </script>
</body>
</html>